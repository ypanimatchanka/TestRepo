name: Deploy Test Environment
concurrency:
  group: Test
  cancel-in-progress: true
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    types: [opened, ready_for_review, synchronize, labeled, reopened]
jobs:
  deploy:
    outputs:
      jobstatus: ${{ job.status }}
    if: contains(github.event.pull_request.labels.*.name, 'ready for test')
    name: Build & Upload Mobile Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    environment:
      name: Test
    steps:
      - uses: actions/checkout@v2
      - name: Set Google Credentials
        env:
          GOOGLE_PLAY_SERVICE_ACCOUNT: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
        run: |
          echo DEPLOY_STATUS='failed' >> $GITHUB_ENV
          echo $GOOGLE_PLAY_SERVICE_ACCOUNT | base64 --decode > google_account.json
      - name: Clone Certificactes Repository
        uses: actions/checkout@v2
        with:
          repository: waveneuroscience/certificates
          token: ${{ secrets.PAT }}
          path: ./keystore

      - name: Decrypt Keystore
        env:
          PASSPHRASE: ${{ secrets.PASSPHRASE_B2B }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output application.keystore keystore/keystore/application-b2b-qa.keystore.gpg
      - name: Install Deps
        run: |
          sudo apt-get update && sudo apt-get install libcurl3-dev
          sudo gem install bundler -v 2.3.26
          bundle install
      - name: Run Fastlane
        id: fastlane
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD_B2B_QA }}
          KEYSTORE_ALIAS: ${{ secrets.KEYSTORE_ALIAS_B2B_QA }}
          KEYSTORE_ALIAS_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD_B2B_QA }}
          FLAVOR: 't–µst'
        run: |
          bundle exec fastlane android beta --env test
      - name: Export build status
        if: ${{ always() }}
        run:
          echo "Job status - ${{ job.status }}"
          echo "History status - "
          echo "::set-env name=DEPLOY_STATUS::{{ job.status }}"
  slack:
    needs: deploy
    if: contains(github.event.pull_request.labels.*.name, 'ready for test') && ${{ always() }}
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
      - name: Test
        run: echo "Test - ${{ needs.deploy.outputs.jobstatus }}"
      - name: Send slack notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "pretext": "*Pull Request:* <https://github.com/waveneuroscience/sonal-mobile-app-ios/pull/${{ github.event.number }}|${{ github.event.pull_request.title }}>",
                  "color": "dbab09",
                  "fields": [
                    {
                      "title": "OS",
                      "short": true,
                      "value": ":robot_face: Android"
                    },
                    {
                      "title": "Build result",
                      "short": true,
                      "value": "${{ env.DEPLOY_STATUS }}"
                    },
                    {
                      "title": "App Name",
                      "short": true,
                      "value": "Sonal Teams"
                    },
                    {
                      "title": "Version (Build)",
                      "short": true,
                      "value": "${{ env.FL_BUILD_VERSION }}"
                    }
                  ]
                }
              ],
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Environment: *Test*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Subscribtions tags: wn_android_${{ env.DEPLOY_STATUS }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WEBHOOK_URL_SLACK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK