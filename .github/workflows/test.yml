name: Deploy Test Environment
concurrency:
  group: Test
  cancel-in-progress: true
on:
  workflow_dispatch:
  pull_request:
    branches: [main]
    types: [opened, ready_for_review, synchronize, labeled, reopened]
jobs:
  deploy:
    outputs:
      jobstatus: ${{ job.status }}
    if: contains(github.event.pull_request.labels.*.name, 'ready for test')
    runs-on: ubuntu-latest
    name: Build & Upload Web Application
    environment:
      name: Test
      url: https://wn.repmvbx.xyz/
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
      - uses: actions/setup-node@v3
        with:
          node-version: 16.18.0
      - name: Install Dependencies
        run: npm ci
      - name: Build Bundle
        env:
          CI: false
          REACT_APP_USER_POOL_ID: ${{ secrets.USER_POOL_ID }}
          REACT_APP_CLIENT_ID: ${{ secrets.CLIENT_ID }}
          REACT_APP_API_URL: ${{ secrets.API_URL }}
          REACT_APP_ENV: ${{ secrets.ENV }}
          REACT_APP_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        run: |
          npm run build
      - name: Upload Bundle
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SOURCE_DIR: "build"
      - name: Invalidate CloudFront Distribution
        uses: chetan/invalidate-cloudfront-action@master
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DISTRIBUTION: ${{ secrets.DISTRIBUTION }}
          PATHS: '/*'
  slack:
    needs: [deploy]
    if: contains(github.event.pull_request.labels.*.name, 'ready for test') && ${{ always() }} && ( failure() || success() )
    name: Slack Notification
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v1
      - name: Get build version info
        run: |
          echo "VERSION_INFORMATION=$(jq -c . < ./package.json)" >> $GITHUB_ENV
      - name: Send slack notification
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "attachments": [
                {
                  "pretext": "*Pull Request:* <https://github.com/waveneuroscience/waveneuro-consumer-frontend/pull/${{ github.event.number }}|${{ github.event.pull_request.title }}>",
                  "color": "dbab09",
                  "fields": [
                    {
                      "title": "Build result",
                      "short": true,
                      "value": "${{ needs.deploy.outputs.jobstatus }}"
                    },
                    {
                      "title": "App Name",
                      "short": true,
                      "value": "Waveneuro consumer frontend"
                    },
                    {
                      "title": "Version",
                      "short": true,
                      "value": "${{ fromJson( env.VERSION_INFORMATION ).version }}"
                    }
                  ]
                }
              ],
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Environment: *Test*"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "Subscriptions tags: wn_frontend_${{ needs.deploy.outputs.jobstatus }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.WEBHOOK_URL_SLACK }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
